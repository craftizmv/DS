// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/proto/animals/animals.proto

package animals

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Animals_GetAnimals_FullMethodName    = "/animals.Animals/GetAnimals"
	Animals_DeleteAnimals_FullMethodName = "/animals.Animals/DeleteAnimals"
	Animals_AddAnimal_FullMethodName     = "/animals.Animals/AddAnimal"
	Animals_GetAnimal_FullMethodName     = "/animals.Animals/GetAnimal"
)

// AnimalsClient is the client API for Animals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AnimalsClient defines the operations for animal management
type AnimalsClient interface {
	// GetAnimals returns all animals
	GetAnimals(ctx context.Context, in *GetAnimalsRequest, opts ...grpc.CallOption) (*GetAnimalsResponse, error)
	// DeleteAnimals deletes all animals
	DeleteAnimals(ctx context.Context, in *DeleteAnimalsRequest, opts ...grpc.CallOption) (*DeleteAnimalsResponse, error)
	// AddAnimal adds a new animal
	AddAnimal(ctx context.Context, in *AddAnimalRequest, opts ...grpc.CallOption) (*AddAnimalResponse, error)
	// GetAnimal gets an animal by name
	GetAnimal(ctx context.Context, in *GetAnimalRequest, opts ...grpc.CallOption) (*GetAnimalResponse, error)
}

type animalsClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimalsClient(cc grpc.ClientConnInterface) AnimalsClient {
	return &animalsClient{cc}
}

func (c *animalsClient) GetAnimals(ctx context.Context, in *GetAnimalsRequest, opts ...grpc.CallOption) (*GetAnimalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnimalsResponse)
	err := c.cc.Invoke(ctx, Animals_GetAnimals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalsClient) DeleteAnimals(ctx context.Context, in *DeleteAnimalsRequest, opts ...grpc.CallOption) (*DeleteAnimalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnimalsResponse)
	err := c.cc.Invoke(ctx, Animals_DeleteAnimals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalsClient) AddAnimal(ctx context.Context, in *AddAnimalRequest, opts ...grpc.CallOption) (*AddAnimalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAnimalResponse)
	err := c.cc.Invoke(ctx, Animals_AddAnimal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalsClient) GetAnimal(ctx context.Context, in *GetAnimalRequest, opts ...grpc.CallOption) (*GetAnimalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnimalResponse)
	err := c.cc.Invoke(ctx, Animals_GetAnimal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimalsServer is the server API for Animals service.
// All implementations must embed UnimplementedAnimalsServer
// for forward compatibility.
//
// AnimalsClient defines the operations for animal management
type AnimalsServer interface {
	// GetAnimals returns all animals
	GetAnimals(context.Context, *GetAnimalsRequest) (*GetAnimalsResponse, error)
	// DeleteAnimals deletes all animals
	DeleteAnimals(context.Context, *DeleteAnimalsRequest) (*DeleteAnimalsResponse, error)
	// AddAnimal adds a new animal
	AddAnimal(context.Context, *AddAnimalRequest) (*AddAnimalResponse, error)
	// GetAnimal gets an animal by name
	GetAnimal(context.Context, *GetAnimalRequest) (*GetAnimalResponse, error)
	mustEmbedUnimplementedAnimalsServer()
}

// UnimplementedAnimalsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnimalsServer struct{}

func (UnimplementedAnimalsServer) GetAnimals(context.Context, *GetAnimalsRequest) (*GetAnimalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimals not implemented")
}
func (UnimplementedAnimalsServer) DeleteAnimals(context.Context, *DeleteAnimalsRequest) (*DeleteAnimalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnimals not implemented")
}
func (UnimplementedAnimalsServer) AddAnimal(context.Context, *AddAnimalRequest) (*AddAnimalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimal not implemented")
}
func (UnimplementedAnimalsServer) GetAnimal(context.Context, *GetAnimalRequest) (*GetAnimalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimal not implemented")
}
func (UnimplementedAnimalsServer) mustEmbedUnimplementedAnimalsServer() {}
func (UnimplementedAnimalsServer) testEmbeddedByValue()                 {}

// UnsafeAnimalsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimalsServer will
// result in compilation errors.
type UnsafeAnimalsServer interface {
	mustEmbedUnimplementedAnimalsServer()
}

func RegisterAnimalsServer(s grpc.ServiceRegistrar, srv AnimalsServer) {
	// If the following call pancis, it indicates UnimplementedAnimalsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Animals_ServiceDesc, srv)
}

func _Animals_GetAnimals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalsServer).GetAnimals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Animals_GetAnimals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalsServer).GetAnimals(ctx, req.(*GetAnimalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Animals_DeleteAnimals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnimalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalsServer).DeleteAnimals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Animals_DeleteAnimals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalsServer).DeleteAnimals(ctx, req.(*DeleteAnimalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Animals_AddAnimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnimalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalsServer).AddAnimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Animals_AddAnimal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalsServer).AddAnimal(ctx, req.(*AddAnimalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Animals_GetAnimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalsServer).GetAnimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Animals_GetAnimal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalsServer).GetAnimal(ctx, req.(*GetAnimalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Animals_ServiceDesc is the grpc.ServiceDesc for Animals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Animals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "animals.Animals",
	HandlerType: (*AnimalsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnimals",
			Handler:    _Animals_GetAnimals_Handler,
		},
		{
			MethodName: "DeleteAnimals",
			Handler:    _Animals_DeleteAnimals_Handler,
		},
		{
			MethodName: "AddAnimal",
			Handler:    _Animals_AddAnimal_Handler,
		},
		{
			MethodName: "GetAnimal",
			Handler:    _Animals_GetAnimal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/animals/animals.proto",
}
